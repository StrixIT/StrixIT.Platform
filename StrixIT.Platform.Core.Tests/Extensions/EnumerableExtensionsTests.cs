//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Core.Tests
{
    [TestClass()]
    public class EnumerableExtensionsTests
    {
        [TestMethod]
        public void TrimAnArrayOfStringsShouldTrimAllMembers()
        {
            var array = new string[] { " A ", "B  ", "  C 1   " };
            var result = EnumerableExtensions.Trim(array);
            Assert.IsTrue(result[0] == "A" && result[1] == "B" && result[2] == "C 1");
        }

        #region ToLowerCase

        [TestMethod]
        public void ToLowerShouldConvertAnArrayOfStringsToLowerCase()
        {
            var array = new string[] { "A", "B", "C" };
            var result = EnumerableExtensions.ToLower(array);
            Assert.IsTrue(result.SequenceEqual(new string[] { "a", "b", "c" }));
        }

        #endregion ToLowerCase

        #region Length

        [TestMethod]
        public void IEnumerableLengthShouldReturnProperLength()
        {
            IEnumerable array = new string[] { "A", "B", "C" };
            var result = EnumerableExtensions.Length(array);
            Assert.AreEqual(3, result);
        }

        #endregion Length

        #region IsEmpty

        [TestMethod]
        public void IEnumerableIsEmptyShouldReturnTrueOnNull()
        {
            IEnumerable array = null;
            var result = EnumerableExtensions.IsEmpty(array);
            Assert.AreEqual(true, result);
        }

        [TestMethod]
        public void IEnumerableIsEmptyShouldReturnTrueWhenNoItemsPresent()
        {
            IEnumerable array = new string[0];
            var result = EnumerableExtensions.IsEmpty(array);
            Assert.AreEqual(true, result);
        }

        [TestMethod]
        public void IEnumerableIsEmptyShouldReturnFalseWhenItemsPresent()
        {
            IEnumerable array = new string[] { "A" };
            var result = EnumerableExtensions.IsEmpty(array);
            Assert.AreEqual(false, result);
        }

        #endregion IsEmpty

        [TestMethod]
        public void GetFirstShouldReturnFirstMemberOfIEnumerable()
        {
            IEnumerable list = new int[] { 1, 2, 3, 4 };
            var result = list.GetFirst();
            Assert.AreEqual(1, result);
        }

        [TestMethod]
        public void GetListShouldReturnAllMembersOfIEnumerable()
        {
            IEnumerable list = new int[] { 1, 2, 3, 4 };
            var result = list.GetList() as List<int>;
            Assert.IsNotNull(result);
            Assert.AreEqual(4, result.Count);
        }
    }
}