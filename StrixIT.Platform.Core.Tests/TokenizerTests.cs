//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;

namespace StrixIT.Platform.Core.Tests
{
    [TestClass]
    public class TokenizerTests
    {
        [TestMethod]
        public void TokenizeSimpleStringShouldReplaceAllTokens()
        {
            string name = "Test";
            string number = "2";
            string value = "This is [[NAME]] a tokenized string with [[NUMBER]] tokens.";
            var tokens = new Dictionary<string, string>();
            tokens.Add("[[NAME]]", name);
            tokens.Add("[[NUMBER]]", number);
            var result = Tokenizer.ReplaceTokens(value, tokens);
            Assert.AreEqual("This is Test a tokenized string with 2 tokens.", result);
        }

        [TestMethod]
        public void TokenizeStringWithTokenizedTokensShouldReplaceAllTokens()
        {
            string name = "This name is [[STATUS]]";
            string number = "2";
            string status = "Great";
            string value = "This is [[NAME]] a tokenized string with [[NUMBER]] tokens.";
            var tokens = new Dictionary<string, string>();
            tokens.Add("[[NAME]]", name);
            tokens.Add("[[NUMBER]]", number);
            tokens.Add("[[STATUS]]", status);
            var result = Tokenizer.ReplaceTokens(value, tokens);
            Assert.AreEqual("This is This name is Great a tokenized string with 2 tokens.", result);
        }

        [TestMethod]
        public void TokenizeStringWithRegisteredTokensAndSuppliedTokensShouldReplaceAllTokens()
        {
            string name = "This name is [[STATUS]]";
            string number = "2";
            string value = "This is [[NAME]] a tokenized string with [[NUMBER]] tokens.";
            var tokens = new Dictionary<string, string>();
            tokens.Add("[[NAME]]", name);
            tokens.Add("[[NUMBER]]", number);
            Tokenizer.RegisterToken("[[STATUS]]", "small");
            var result = Tokenizer.ReplaceTokens(value, tokens);
            Assert.AreEqual("This is This name is small a tokenized string with 2 tokens.", result);
        }

        [TestMethod]
        public void TokenizeSimpleStringWithoutSupplyingAllTokensShouldReplaceSuppliedTokensAndLeaveOthers()
        {
            string name = "Test";
            string value = "This is [[NAME]] a tokenized string with [[NUMBER]] tokens.";
            var tokens = new Dictionary<string, string>();
            tokens.Add("[[NAME]]", name);
            var result = Tokenizer.ReplaceTokens(value, tokens);
            Assert.AreEqual("This is Test a tokenized string with [[NUMBER]] tokens.", result);
        }
    }
}