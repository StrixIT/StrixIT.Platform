//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Core.Tests
{
    [TestClass()]
    public class DataMapperTests
    {
        private static bool _initialized = false;

        [TestMethod]
        public void MapIntEntityToIntEntityViewModelWithPredefinedMapShouldMapAllProperties()
        {
            Init();
            IntEntity entity = new IntEntity() { Id = 1, Name = "Test", Number = 10, IsRequired = true, StartDate = new DateTime(2012, 5, 16) };
            IntEntityViewModel model = entity.Map<IntEntityViewModel>();
            bool result = entity.Id == model.Id
                            && entity.Name == model.EntityName
                            && entity.Number == model.Order
                            && entity.IsRequired == model.Required
                            && entity.StartDate == model.Date;
            Assert.IsTrue(result);
        }

        [TestMethod]
        public void MapIntEntityToIntEntityViewModelWithPredefinedMapAndExistingModelShouldMapAllPropertiesButKeepValuesOfPropertiesThatDoNotExistInTheSource()
        {
            Init();
            IntEntity entity = new IntEntity() { Name = "Test", IsRequired = false, StartDate = new DateTime(2012, 5, 16) };
            IntEntityViewModel model = new IntEntityViewModel() { Id = 1, EntityName = "Test", Order = 10, Required = true, ViewModelOnly = "Test" };
            entity.Map<IntEntityViewModel>(model);
            bool result = entity.Id == model.Id
                            && entity.Name == model.EntityName
                            && entity.Number == model.Order
                            && entity.IsRequired == model.Required
                            && entity.StartDate == model.Date
                            && model.ViewModelOnly == "Test";
            Assert.IsTrue(result);
        }

        [TestMethod]
        public void MapOnNullEntityShouldReturnDefaultForType()
        {
            Init();
            IntEntity entity = null;
            IntEntityViewModel model = entity.Map<IntEntityViewModel>();
            Assert.IsNull(model);
        }

        [TestMethod]
        public void MapOnNullEntityListShouldReturnNull()
        {
            Init();
            List<IntEntity> entities = null;
            var models = entities.Map<IntEntityViewModel>();
            Assert.AreEqual(models.Count(), 0);
        }

        [TestMethod]
        public void MapOnEmptyEntityListShouldReturnEmptyModelList()
        {
            Init();
            List<IntEntity> entities = new List<IntEntity>();
            var models = entities.Map<IntEntityViewModel>();
            Assert.IsTrue(models.Count() == 0);
        }

        [TestMethod]
        public void MapListOfIntEntitiesToIntEntityViewModelsWithPredefinedMapShouldMapAllProperties()
        {
            Init();
            IntEntity entityA = new IntEntity() { Id = 1, Name = "Test A", Number = 10, IsRequired = true, StartDate = new DateTime(2012, 5, 16) };
            IntEntity entityB = new IntEntity() { Id = 2, Name = "Test B", Number = 11, IsRequired = true, StartDate = new DateTime(2012, 5, 16) };
            IntEntity entityC = new IntEntity() { Id = 3, Name = "Test C", Number = 12, IsRequired = true, StartDate = new DateTime(2012, 5, 16) };

            var list = new List<IntEntity>() { entityA, entityB, entityC };
            var modelList = list.Map(typeof(IntEntityViewModel));
            Assert.AreEqual(3, modelList.Cast<IntEntityViewModel>().Length());
        }

        #region Project

        [TestMethod()]
        public void MapShouldReturnListWithProjectedTypePropertiesOnlyUsingIQueryableOnMemoryCollection()
        {
            var result = TestEntityFactory.GetEntityList().AsQueryable().Map<IntEntityViewModel>();
            Assert.AreEqual(6, result.Count());
            Assert.IsTrue(result.All(r => r.Id > 0));
            Assert.IsTrue(result.All(r => r.Date.HasValue));
        }

        [TestMethod()]
        public void MapShouldReturnListWithExistingPropertiesOnlyUsingIQueryableOnDatabase()
        {
            Init();
            var source = new TestDataSource();
            var list = new List<TestEntity>()
            {
                new TestEntity
                {
                    Name = "Test generated 1",
                    Number = 1
                }, 
                new TestEntity
                {
                    Name = "Test generated 2",
                    Number = 2
                },
                new TestEntity
                {
                    Name = "Test generated 3",
                    Number = 3
                }
            };

            source.Save(list);
            source.SaveChanges();
            source = new TestDataSource();

            var entities = source.IntEntities.GetList();
            var result = entities.Map<TestEntityViewModel>().ToList();

            source.Delete(entities);
            source.SaveChanges();

            Assert.IsTrue(result.Count == 3);
            Assert.IsTrue(result.All(r => !string.IsNullOrWhiteSpace(r.Name)));
            Assert.IsTrue(result.All(r => r.Number > 0));
            Assert.IsTrue(result.All(r => r.NotAvailable == null));
        }

        #endregion

        private void Init()
        {
            if (!_initialized)
            {
                var config = new MapConfig<IntEntity, IntEntityViewModel>();
                config.MembersToMap.Add(d => d.EntityName, s => s.Name);
                config.MembersToMap.Add(d => d.Order, s => s.Number);
                config.MembersToMap.Add(d => d.Required, s => s.IsRequired);
                config.MembersToMap.Add(d => d.Date, s => s.StartDate);
                DataMapper.RegisterMapConfig(config);

                var returnConfig = new MapConfig<IntEntityViewModel, IntEntity>();
                returnConfig.MembersToMap.Add(d => d.Name, s => s.EntityName);
                returnConfig.MembersToMap.Add(d => d.Number, s => s.Order);
                returnConfig.MembersToMap.Add(d => d.IsRequired, s => s.Required);
                returnConfig.MembersToMap.Add(d => d.StartDate, s => s.Date);
                DataMapper.RegisterMapConfig(returnConfig);

                var testConfig = new MapConfig<TestEntity, TestEntityViewModel>();
                testConfig.MembersToIgnore.Add(d => d.Description);
                DataMapper.RegisterMapConfig(testConfig);
            }
        }
    }
}