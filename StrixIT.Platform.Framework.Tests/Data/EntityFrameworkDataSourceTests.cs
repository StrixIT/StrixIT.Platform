//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using StrixIT.Platform.Core;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Linq;

namespace StrixIT.Platform.Framework.Tests
{
    [TestClass]
    public class EntityFrameworkDataSourceTests
    {
        #region Public Methods

        [TestMethod]
        public void EFDataSourceIsInitializedSuccessfullyWithBasicConnection()
        {
            var source = new TestDataSource();
            Assert.IsNotNull(source);
            Assert.IsTrue(source.Database.Connection.ConnectionString.Contains("ServicesTest"));
        }

        [TestMethod]
        public void EFDataSourceIsInitializedSuccessfullyWithCustomConnection()
        {
            var source = new TestDataSource("CustomConnection");
            Assert.IsNotNull(source);
            Assert.IsTrue(source.Database.Connection.ConnectionString.Contains("ToolsTestCustomConnection"));
        }

        [TestMethod]
        public void EFDataSourceShouldDeleteAListOfEntities()
        {
            var source = new TestDataSource();
            var existing = source.Query<TestEntity>().GetList();

            if (existing.Count > 0)
            {
                source.Delete(existing);
                source.SaveChanges();
            }

            var list = new List<TestEntity>()
            {
                new TestEntity
                {
                    Name = "Test generated 1",
                    Number = 1
                },
                new TestEntity
                {
                    Name = "Test generated 2",
                    Number = 2
                },
                new TestEntity
                {
                    Name = "Test generated 3",
                    Number = 3
                }
            };

            source.Save(list);
            source.SaveChanges();
            source.Delete(list);
            source.SaveChanges();
            existing = source.Query<TestEntity>().GetList();
            Assert.AreEqual(0, existing.Count);
        }

        [TestMethod]
        public void EFDataSourceShouldDeleteEntity()
        {
            var source = new TestDataSource();
            var entity = GetEntity();
            source.Save(entity);
            source.SaveChanges();
            var id = entity.Id;
            source.Delete(entity);
            entity = source.Set<TestEntity>().Find(new object[] { id });
            Assert.AreEqual(System.Data.Entity.EntityState.Deleted, source.Entry(entity).State);
            source.SaveChanges();
        }

        [TestMethod]
        public void EFDataSourceShouldSaveAListOfIntEntities()
        {
            var source = new TestDataSource();
            var entities = GetEntityList();
            var result = source.Save(entities);
            source.SaveChanges();
            source.Delete(entities);
            source.SaveChanges();
            Assert.AreEqual(6, result.Count);

            foreach (var item in result)
            {
                Assert.AreNotEqual(0, item.Id);
            }
        }

        [TestMethod]
        public void EFDataSourceShouldSaveNewCompositeKeyEntityAndNotSetItsGuidKey()
        {
            var source = new TestDataSource();
            var entity = new CompositeKeyEntity();
            var result = source.Save(entity);
            Assert.IsNotNull(result);
            Assert.AreEqual(Guid.Empty, entity.Id);
        }

        [TestMethod]
        public void EFDataSourceShouldSaveNewGuidEntityAndSetItsKey()
        {
            var source = new TestDataSource();
            var entity = new GuidEntity { Name = "Test" };
            var result = source.Save(entity);
            Assert.IsNotNull(result);
            Assert.AreNotEqual(Guid.Empty, entity.Id);
        }

        [TestMethod]
        public void EFDataSourceShouldSaveNewIntEntity()
        {
            var source = new TestDataSource();
            var entity = GetEntity();
            var result = source.Save(entity);
            source.SaveChanges();
            source.Delete(result);
            source.SaveChanges();
            Assert.IsNotNull(result);
            Assert.AreNotEqual(0, entity.Id);
        }

        [TestMethod]
        [ExpectedException(typeof(ValidationException))]
        public void EFDataSourceShouldThrowValidationExceptionWhenTryingToSaveAnInvalidEntity()
        {
            var source = new TestDataSource();
            var entity = new TestEntity();
            var result = source.Save(entity);
        }

        [TestMethod]
        public void QueryWithRelationsShouldReturnEntitiesWithRelations()
        {
            var source = new TestDataSource();
            int id = 0;

            var customField = new TestCustomField { Name = "Test", FieldType = CustomFieldType.String, GroupId = Guid.NewGuid() };
            source.Save(customField);
            source.SaveChanges();

            var entity = new TestEntity
            {
                Name = "Test generated 1",
                Number = 1,
                CustomFields = new List<TestCustomFieldValue> { new TestCustomFieldValue { StringValue = "Test", Culture = "en", CustomField = customField, CustomFieldId = customField.Id } }
            };

            source.Save(entity);
            source.SaveChanges();
            id = entity.Id;

            var newSource = new TestDataSource();
            var result = newSource.Query<TestEntity>().Include(c => c.CustomFields).First(t => t.Id == id);
            Assert.IsNotNull(result.CustomFields);
            Assert.AreEqual("Test", result.CustomFields.First().StringValue);
            newSource.Delete(result);
            newSource.SaveChanges();
        }

        #endregion Public Methods

        #region Private Methods

        private static TestEntity GetEntity()
        {
            var entity = new TestEntity();
            entity.Name = "Test";
            entity.Number = 5;
            entity.Value = 2.5;
            entity.Date = DateTime.Now.Date;
            entity.IsActive = true;
            return entity;
        }

        private static List<TestEntity> GetEntityList()
        {
            List<TestEntity> list = new List<TestEntity>();

            var entity = new TestEntity();
            entity.Id = 1;
            entity.Name = "Rutger";
            entity.Number = 5;
            entity.Value = 2.5;
            entity.Price = 2.75m;
            entity.Date = DateTime.Now.Date;
            entity.IsActive = true;
            list.Add(entity);

            entity = new TestEntity();
            entity.Id = 2;
            entity.Name = "Sanne";
            entity.Number = 10;
            entity.Value = 5;
            entity.Price = 3.40m;
            entity.Date = DateTime.Now.AddDays(5).Date;
            entity.IsActive = false;
            list.Add(entity);

            entity = new TestEntity();
            entity.Id = 3;
            entity.Name = "Magnus";
            entity.Number = 15;
            entity.Value = 7.5;
            entity.Price = 4.80m;
            entity.Date = DateTime.Now.AddDays(10).Date;
            entity.IsActive = true;
            list.Add(entity);

            entity = entity = new TestEntity();
            entity.Id = 4;
            entity.Name = "Dagmar";
            entity.Number = 20;
            entity.Value = 10;
            entity.Price = 5.95m;
            entity.Date = DateTime.Now.AddDays(15).Date;
            entity.IsActive = false;
            list.Add(entity);

            entity = entity = new TestEntity();
            entity.Id = 5;
            entity.Name = "Sam";
            entity.Number = 25;
            entity.Value = 12.5;
            entity.Price = 6.50m;
            entity.Date = DateTime.Now.AddDays(20).Date;
            entity.IsActive = true;
            list.Add(entity);

            entity = entity = new TestEntity();
            entity.Id = 6;
            entity.Name = "Sien";
            entity.Number = 30;
            entity.Value = 15;
            entity.Price = 7.70m;
            entity.Date = DateTime.Now.AddDays(25).Date;
            entity.IsActive = false;
            list.Add(entity);

            return list;
        }

        #endregion Private Methods
    }
}